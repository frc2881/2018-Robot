// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2881.karlk.commands.AutoCommands;

import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoCrossLineCommands.AutoCrossLineCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoScaleCommands.AutoScaleCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoSwitchCommands.AutoSwitchCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.AutoOptions;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.StartingLocation;
import org.usfirst.frc2881.karlk.commands.AutonomousRobotFinish;
import org.usfirst.frc2881.karlk.commands.DriveForward;

/**
 *
 */
class SafeAuto extends AbstractAutoCommand {

    SafeAuto(StartingLocation start, AutoOptions auto, String gameData) {

        if (auto == AutoOptions.NONE) {
            return;
        }

        boolean switchOnLeft = gameData.charAt(0) == 'L';
        boolean switchOnRight = !switchOnLeft;

        boolean scaleOnLeft = gameData.charAt(1) == 'L';
        boolean scaleOnRight = !scaleOnLeft;

        boolean canGoLeft = start == StartingLocation.LEFT;
        boolean canGoRight = start == StartingLocation.RIGHT;

        boolean scoreSwitch = ((auto == AutoOptions.SWITCH || auto == AutoOptions.PRIORITY_SWITCH) && ((canGoLeft && switchOnLeft) || (canGoRight && switchOnRight))) ||
                (auto == AutoOptions.PRIORITY_SCALE && ((canGoLeft && scaleOnRight && switchOnLeft) || (canGoRight && scaleOnLeft && switchOnRight))) ;

        boolean scoreScaleLeft = (auto == AutoOptions.PRIORITY_SCALE && canGoLeft && scaleOnLeft) ||
                (auto == AutoOptions.PRIORITY_SWITCH && canGoLeft && scaleOnLeft && switchOnRight);
        boolean scoreScaleRight = (auto == AutoOptions.PRIORITY_SCALE && canGoRight && scaleOnRight) ||
                (auto == AutoOptions.PRIORITY_SWITCH && canGoRight && scaleOnRight && switchOnLeft);

        // Move away from the wall
        addSequential(new DriveForward((46.0 - 26.4) / 12));
        addSequential(new AutonomousRobotFinish());

        if (scoreSwitch) {
            addSequential(new AutoSwitchCommand(start, gameData));

        } else if (scoreScaleRight || scoreScaleLeft) {
            addSequential(new AutoScaleCommand(start, gameData, auto));

        } else {
            addSequential(new AutoCrossLineCommand(start));
        }
    }

}
