// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2881.karlk.commands.AutoCommands;

import com.sun.tools.javadoc.Start;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.ConditionalCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoCrossLineCommands.AutoCrossLineCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoScaleCommands.AutoScaleCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoSwitchCommands.AutoSwitchCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.AutoOptions;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.AutoStrategy;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.CrossLineLocation;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.StartingLocation;
import org.usfirst.frc2881.karlk.commands.AutoCommands.Enums.SwitchPosition;
import org.usfirst.frc2881.karlk.commands.DriveForward;
import org.usfirst.frc2881.karlk.commands.RobotPrep;
import org.usfirst.frc2881.karlk.commands.SetClaw;
import org.usfirst.frc2881.karlk.subsystems.LiftSubsystem;

/**
 *
 */
public class SafeAuto extends AbstractAutoCommand {

    public SafeAuto(StartingLocation start, AutoOptions auto,
                    SwitchPosition side, String gameData, AutoStrategy strategy){

        addSequential(new ConditionalCommand(new DriveForward(64.0 / 12)) {
            @Override
            protected boolean condition() {
                return auto != AutoOptions.NONE;
            }
        });

        addSequential(new ConditionalCommand(new AutoCrossLineCommand(start, strategy)) {
            @Override
            protected boolean condition() {
                return auto == AutoOptions.CROSS_LINE;
            }
        });

        addSequential(new ConditionalCommand(new AutoSwitchCommand(start, gameData, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.SWITCH && (((start == StartingLocation.LEFT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_LEFT))
                        && gameData.charAt(0) == 'L') ||
                        ((start == StartingLocation.RIGHT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_RIGHT))
                        && gameData.charAt(0) == 'R')));
            }
        });

        addSequential(new ConditionalCommand(new AutoSwitchCommand(start, gameData, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.SWITCH && (start == StartingLocation.RIGHT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_RIGHT))
                        && gameData.charAt(0) == 'R');
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, auto, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.BOTH && (start == StartingLocation.RIGHT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_RIGHT))
                        && gameData.charAt(0) == 'R' && gameData.charAt(1) == 'R');
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, auto, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.SCALE &&(start == StartingLocation.RIGHT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_RIGHT))
                        && gameData.charAt(1) == 'R');
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, AutoOptions.SCALE, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.BOTH && (start == StartingLocation.RIGHT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_RIGHT))
                        && gameData.charAt(1) == 'R' && gameData.charAt(0) != 'R');
            }
        });

        addSequential(new ConditionalCommand(new AutoSwitchCommand(start, gameData, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.BOTH && (start == StartingLocation.RIGHT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_RIGHT))
                        && gameData.charAt(1) != 'R' && gameData.charAt(0) == 'R');
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, auto, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.BOTH && (start == StartingLocation.LEFT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_LEFT))
                        && gameData.charAt(0) == 'L' && gameData.charAt(1) == 'L');
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, auto, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.SCALE && (start == StartingLocation.LEFT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_LEFT))
                        && gameData.charAt(1) == 'L');
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, AutoOptions.SCALE, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.BOTH && (start == StartingLocation.LEFT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_LEFT))
                        && gameData.charAt(1) == 'L' && gameData.charAt(0) != 'L');
            }
        });

        addSequential(new ConditionalCommand(new AutoSwitchCommand(start, gameData, side, strategy)) {
            @Override
            protected boolean condition() {
                return (auto == AutoOptions.BOTH && (start == StartingLocation.LEFT ||
                        (start == StartingLocation.CENTER && strategy == AutoStrategy.SAFE_AUTO_LEFT))
                        && gameData.charAt(1) != 'L' && gameData.charAt(0) == 'L');
            }
        });

    }

}
