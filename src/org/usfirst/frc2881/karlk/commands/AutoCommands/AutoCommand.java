// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2881.karlk.commands.AutoCommands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.ConditionalCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoCrossLineCommands.AutoCrossLineCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoScaleCommands.AutoScaleCommand;
import org.usfirst.frc2881.karlk.commands.AutoCommands.AutoSwitchCommands.AutoSwitchCommand;
import org.usfirst.frc2881.karlk.commands.DriveForward;
import org.usfirst.frc2881.karlk.commands.RobotPrep;
import org.usfirst.frc2881.karlk.commands.SetClaw;
import org.usfirst.frc2881.karlk.subsystems.DriveSubsystem;
import org.usfirst.frc2881.karlk.subsystems.LiftSubsystem;

/**
 *
 */
public class AutoCommand extends CommandGroup {

    private final DriveSubsystem.StartingLocation start;
    private final DriveSubsystem.AutoOptions auto;
    private final String gameData;
    private final DriveSubsystem.SwitchPosition side;
    private final DriveSubsystem.CrossLineLocation line;

    public AutoCommand(DriveSubsystem.StartingLocation start, DriveSubsystem.AutoOptions auto,
                       String gameData, DriveSubsystem.SwitchPosition side, DriveSubsystem.CrossLineLocation line){

        this.start = start;
        this.auto = auto;
        this.gameData = DriverStation.getInstance().getGameSpecificMessage();
        this.side = side;
        this.line = line;

        addSequential(new RobotPrep());

        addParallel(new SetClaw(LiftSubsystem.ClawState.CLOSED));

        addSequential(new DriveForward(58/12));

        addSequential(new ConditionalCommand(new AutoCrossLineCommand(start, line)) {
            @Override
            protected boolean condition() {
                return auto == DriveSubsystem.AutoOptions.CROSS_LINE;
            }
        });

        addSequential(new ConditionalCommand(new AutoSwitchCommand(start, gameData, side)) {
            @Override
            protected boolean condition() {
                return (auto == DriveSubsystem.AutoOptions.SWITCH);
            }
        });

        addSequential(new ConditionalCommand(new AutoScaleCommand(start, gameData, auto, side)) {
            @Override
            protected boolean condition() {
                return (auto == DriveSubsystem.AutoOptions.SCALE || auto == DriveSubsystem.AutoOptions.BOTH);
            }
        });

    }

    @Override
    protected void initialize() {
        System.out.println("Autonomous command has started");
    }

    @Override
    protected void end() {
        System.out.println("Autonomous command has ended");
    }
}
