// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2881.karlk;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2881.karlk.commands.AutonomousCommand;
import org.usfirst.frc2881.karlk.commands.ChangeGears;
import org.usfirst.frc2881.karlk.commands.Climb;
import org.usfirst.frc2881.karlk.commands.ControlArmwithJoysticks;
import org.usfirst.frc2881.karlk.commands.DeployOmnis;
import org.usfirst.frc2881.karlk.commands.DepositBoxOnScale;
import org.usfirst.frc2881.karlk.commands.DepositBoxOnSwitch;
import org.usfirst.frc2881.karlk.commands.DrivewithJoysticks;
import org.usfirst.frc2881.karlk.commands.Intake;
import org.usfirst.frc2881.karlk.commands.LiftArmForClimbing;
import org.usfirst.frc2881.karlk.commands.MoveBackwards;
import org.usfirst.frc2881.karlk.commands.MoveForwardHARPER;
import org.usfirst.frc2881.karlk.commands.RumbleJoysticks;
import org.usfirst.frc2881.karlk.commands.TurnLeft;
import org.usfirst.frc2881.karlk.commands.TurnRight;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driver;
    public Joystick manipulator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipulator = new Joystick(1);

        driver = new Joystick(0);


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Move Forward HARPER", new MoveForwardHARPER());
        SmartDashboard.putData("Turn Left", new TurnLeft());
        SmartDashboard.putData("Turn Right", new TurnRight());
        SmartDashboard.putData("Intake", new Intake());
        SmartDashboard.putData("Climb", new Climb());
        SmartDashboard.putData("Control Arm with Joysticks", new ControlArmwithJoysticks());
        SmartDashboard.putData("Deploy Omnis", new DeployOmnis());
        SmartDashboard.putData("Move Backwards", new MoveBackwards());
        SmartDashboard.putData("Change Gears", new ChangeGears());
        SmartDashboard.putData("Lift Arm For Climbing", new LiftArmForClimbing());
        SmartDashboard.putData("Rumble Joysticks", new RumbleJoysticks());
        SmartDashboard.putData("Deposit Box On Switch", new DepositBoxOnSwitch());
        SmartDashboard.putData("Deposit Box On Scale", new DepositBoxOnScale());
        SmartDashboard.putData("Drive with Joysticks", new DrivewithJoysticks());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getManipulator() {
        return manipulator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

